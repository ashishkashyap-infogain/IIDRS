@model IEnumerable<IIDRS.ViewModel.ContactViewModel>

@{
    ViewBag.Title = "Contact Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<br />

<style>
    /* JSFormValidation.css */
    .required { /* Marker for required fields */
        border-color: red;
    }
</style>

<link href="~/Content/Search.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
<script src="~/Scripts/twbsPagination.js" type="text/javascript"></script>
<script src="https://cdn.rawgit.com/rainabba/jquery-table2excel/1.1.0/dist/jquery.table2excel.min.js"></script>
<script src="~/Scripts/Contact.js"></script>
@*<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>*@
<script src="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/js/toastr.min.js"></script>
<link href="//cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/css/toastr.min.css" rel="stylesheet" />

<div style="float:right">
    <button style="float:right" class="btn btn-sm btn-primary rounded-0" id="btnAddRow"><i class="fa fa-address-book"></i>&nbsp;Add</button>
    <button style="float:right" class="btn btn-sm btn-default rounded-0" id="btnExport"><i class="fa fa-download" style=" height: 25px !important; width: 25px !important;"></i></button>

    @*<a href="/Customer/Edit" class="btn btn-sm btn-primary rounded-0"><i class="fa fa-edit"></i>Edit</a>
        <a href="/Customer/Delete" class="btn btn-sm btn-danger rounded-0" onclick="return confirm('Are you sure?') "><i class="fa fa-trash"></i>Delete</a>
        <a href="/Customer/Save" class="btn btn-sm btn-success rounded-0"><i class="fa fa-save"></i>Save</a>*@
    <br /><br />
</div>
<div class="flexbox">
    <div class="search">
        <div>
            <input type="text" placeholder="Search . . ." required id="Search">
        </div>
    </div>
</div>


@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
<table class="table table-bordered table-striped table-hover " id="DataTable">
    <thead class="thead-dark">
        <tr style="cursor:pointer ;white-space: nowrap">
            <th onclick="sortTable(0)">
                @Html.DisplayNameFor(model => model.EMP_ID)
            </th>
            <th onclick="sortTable(1)">
                @Html.DisplayNameFor(model => model.FST_NAME)
            </th>
            <th onclick="sortTable(2)">
                @Html.DisplayNameFor(model => model.LAST_NAME)
            </th>
            <th onclick="sortTable(3)">
                @Html.DisplayNameFor(model => model.EMAIL_ADDR)
            </th>
            <th onclick="sortTable(4)">
                @Html.DisplayNameFor(model => model.PHONE_NO)
            </th>
            <th onclick="sortTable(5)">
                @Html.DisplayNameFor(model => model.BU_NAME)
            </th>
            <th onclick="sortTable(6)">
                @Html.DisplayNameFor(model => model.DU_NAME)
            </th>
            <th onclick="sortTable(7)">
                @Html.DisplayNameFor(model => model.PROJ_NAME)
            </th>
            @*<th onclick="sortTable(8)">
                @Html.DisplayNameFor(model => model.LAST_UPD_DT)
            </th>*@
            <th class="text-center ">
                    @Html.DisplayNameFor(model => model.LAST_UPD_DT)
                </th>*@
            <th class="text-center excludecol">
                @Html.DisplayNameFor(model => model.ACTIVE_FLG)
            </th>


        </tr>

    </thead>

    @foreach (var item in Model)
    {
        <tbody>
            <tr class="Search">


                <td>
                    @Html.DisplayFor(modelItem => item.EMP_ID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FST_NAME)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LAST_NAME)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EMAIL_ADDR)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.PHONE_NO)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BU_NAME)
                </td>
                <td id="textdu">
                    @Html.DisplayFor(modelItem => item.DU_NAME)
                </td>
                <td id="textproj">
                    @Html.DisplayFor(modelItem => item.PROJ_NAME)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.LAST_UPD_DT)
                    </td>*@
                <td class="text-center" style="pointer-events:none">
                    <label class="custom-switch"></label>
                    @if (item.ACTIVE_FLG == "1")
                    {
                        <input type="checkbox" name="custom-switch-checkbox" checked="@item.ACTIVE_FLG" class="custom-switch-input">
                    }
                    else
                    {
                        <input type="checkbox" name="custom-switch-checkbox" checked="@item.ACTIVE_FLG" disabled class="custom-switch-input">

                    }
                    <span class="custom-switch-indicator"></span>
                </td>
                @*<td>
                        @Html.ActionLink("Edit", "Edit", new { id=item.PERSON_UID }) |
                        @Html.ActionLink("Details", "Details", new { id=item.PERSON_UID }) |
                        @Html.ActionLink("Delete", "Delete", new { id=item.PERSON_UID })
                    </td>*@
            </tr>
        </tbody>
    }

</table>
<div class="container">
    <nav aria-label="Page navigation">
        <ul class="pagination" id="pagination"></ul>
    </nav>
</div>

<script>


    let addedInLast = false;
    $('#DataTable').SetEditable({
        columnsEd: "1,2,3,4,5",
        $addButton: $('#btnAddRow'),
        onAdd: function () {
            addedInLast = true
            // $('#btnAddRow').attr("disabled", "disabled");
            GetBU();

        },
        onEdit: (row) => {
            let data
            if (addedInLast) {
                data = getRowData()
                makeRequest(data)

            }
            else {
                data = getEditData(row)
                editRequest(data)
            }
        },

        onDelete: (row) => {
            $("#btnAddRow").removeAttr("disabled");
            let data
            data = getEId(row)
            if (data != null) {
                deleteRequest(data)
            }
        }
    });

    function GetBU() {
        $.ajax({
            type: "GET",
            url: '/Contact/BUDetails',
            success: function (data) {
                var items = "";
                $.each(data, function (i, item) {
                    items += "<option data-value=" + item.buId + ">" + item.buName + "</option>";
                    y = items.buId;
                });
                $("#ddlBUs").empty();
                $("#textdu").empty();
                $("#textproj").empty();
                var fName = $("#fname").val();
                if (fName == " ") { alert("Enter First Name"); }
                var lName = $("#lname").val();
                if (lName == " ") { $("#lname").wrap('<span class="required"/>'); }
                $("#ddlBUs1").html(items);

                var buName = $("#ddlBUs").val();
                var value = $('#ddlBUs1 option').filter(function () {
                    return this.value == buName;
                }).data('value');
                var buId = value ? value : '';
                if (buId != "") {
                    GetDU(buId);
                }


            },
            error: function () {
                $('#ddlBUs').html('No BU details found');
            }
        });
    }


    var valOfbu;
    jQuery('body').on('change', 'input.listclass', function () {
        var proName = $("#ddlBUs").val();
        var value = $('#ddlBUs1 option').filter(function () {
            return this.value == proName;
        }).data('value');
        var buId = value ? value : '';
        valOfbu = buId;
        GetDU(buId);
    });

    function GetDU(buId) {
        $.ajax({
            type: "GET",
            url: '/Contact/GetDUbyId',
            data: { buId: buId },
            success: function (data) {
                $("#textdu").text(data.DU_NAME);
                $("#textproj").text(data.PROJ_NAME);

            },
            error: function () {
                $('#dllBU').html('No DU details found');
            }
        });
    }

    $(function () {
        $("#btnExport").click(function () {
            $("#DataTable").table2excel({
                exclude: ".excludecol,#actionHeader",
                filename: "Contacts_Details.xls",
                name: "Contact Sheet",
            });
        });
    });

    function getRowData(row = null) //default null #TODO incase for edit we have to send row number to get data of specific row
    {
        addedInLast = false

        let lastRow = $('#DataTable tr').eq(1);

        console.log(lastRow);
        let totalCols = lastRow[0].cells.length - 1


        let headings = ["EMP_ID", "FST_NAME", "LAST_NAME", "EMAIL_ADDR", "PHONE_NO", "BU_NAME", "DU_NAME", "PROJ_NAME", "ACTIVE_FLG"]


        let data = {}

        for (let col = 0; col < totalCols; col++) {
            let colData = lastRow[0].cells[col].innerText
            data[headings[col]] = colData

        }

        let requirdCol = ["FST_NAME", "LAST_NAME", "EMAIL_ADDR", "PHONE_NO"];
        var error = false;


        for (let col = 0; col < requirdCol; col++) {
            let colData = lastRow[0].cells[col].innerText
            if (colData === "") {
                this.addClass('required');
                error = true;
            }
            else
                this.removeClass('required');

        }
        if (error) return false;
        return data;
    }
    //for edit of row
    function getEditData(row) {

        let headings = ["EMP_ID", "FST_NAME", "LAST_NAME", "EMAIL_ADDR", "PHONE_NO", "BU_NAME", "DU_NAME", "PROJ_NAME", "ACTIVE_FLG"]


        let data = {}
        getId(row);
        for (let col = 0; col < headings.length - 1; col++) {
            let colData = row.eq(col).text();
            data[headings[col]] = colData
        }

        return data;
    }
    //for delete of row
    function getId(row) {
        addedInLast = false

        let headings = ["PERSON_UID"]

        let data = {}

        data[headings[0]] = row.text();

        return data
    }
    function getEId(row) {
        addedInLast = false

        let headings = ["EMP_ID"]

        let data = {}

        data[headings[0]] = row.text();

        return data
    }
    //ajax post request for add
    function makeRequest(dataToBeSent) {
        //var selectedBUId = $('#ddlBU').val();
        //dataToBeSent.BU_ID = selectedBUId;
        dataToBeSent.BU_ID = valOfbu;

        $.ajax({
            type: "POST",
            url: "https://localhost:44350/Contact/Create",
            data: dataToBeSent,
            success: function () {
                $("#btnAddRow").removeAttr("disabled");
                var msg = '@TempData["message"]';
                    if (msg != "Wrong") {
                        toastr.success("Record added successfully.")
                        setTimeout(function () {
                            location.href = '/Contact/Index';
                        }, 3000);
                    }
                    else {
                        toastr.error("Something went wrong")
                        setTimeout(function () {
                            location.href = '/Contact/Index';
                        }, 3000);
                    }
            },
            error: function () {
                $("#btnAddRow").removeAttr("disabled");
                window.location.reload();
            }

        });
        //alert("Record inserted successfully");
    }


    //ajax post request for edit
    function editRequest(dataToBeSent) {

        $.ajax({
            type: "POST",
            url: "https://localhost:44350/Contact/Edit",
            data: dataToBeSent,
            success: function () {

                 var msg = '@TempData["message"]';
                    if (msg != "Wrong") {
                        toastr.success("Record edited successfully.")
                        setTimeout(function () {
                            location.href = '/Contact/Index';
                        }, 3000);
                    }
                    else {
                        toastr.error("Something went wrong")
                        setTimeout(function () {
                            location.href = '/Contact/Index';
                        }, 3000);
                    }
                //window.location.reload();
            },
            error: function () {
                window.location.reload();

            }
        });
        //alert("Record edited successfully");
    }
    //ajax post request for delete
    function deleteRequest(dataToBeSent) {

        $.ajax({
            type: "POST",
            url: 'https://localhost:44350/Contact/Delete',
            data: dataToBeSent,
            success: function () {
                 var msg = '@TempData["message"]';
                    if (msg != "Wrong") {
                        toastr.success("Record deleted successfully.")
                        setTimeout(function () {
                            location.href = '/Contact/Index';
                        }, 3000);
                    }
                    else {
                        toastr.error("Something went wrong")
                        setTimeout(function () {
                            location.href = '/Contact/Index';
                        }, 3000);
                    }
                //window.location.reload();
            },
            error: function () {
                window.location.reload();
            }
        });
        //alert("Record deleted successfully");
    }


    //for pagination
    $(document).ready(function () {
        let pageSize = 7;
        var visibleRows = $('table#DataTable tbody tr:visible');

        function drawPagination(totalitems) {
            var $pagination = $('#pagination');
            var totalValue = totalitems;
            var toShow = 7;
            var numOfPage = Math.ceil(totalValue / toShow);
            if (numOfPage > 1) {
                var totalPages = numOfPage;
                var currentPage = $pagination.twbsPagination('getCurrentPage');
                $pagination.twbsPagination('destroy');
                $pagination.twbsPagination($.extend({}, {
                    startPage: currentPage,
                    totalPages: totalPages,
                    visiblePages: 7,
                    onPageClick: function (event, page) {
                        refreshPage(event, page);
                    }
                }));
            } else {
                $pagination.twbsPagination('destroy');
            }
        }
        function refreshPage(event, page) {
            var pageStart = (pageSize * page) - pageSize;
            var pageLast = pageSize * page;
            $(visibleRows).hide();
            var currentRows = $(visibleRows).slice(pageStart, pageLast);
            $(currentRows).show();
        }


        drawPagination(visibleRows.length);

    });
    //for search
    function Contains(text_one, text_two) {
        if (text_one.indexOf(text_two) != -1)
            return true;
    }
    $("#Search").keyup(function () {
        var searchtext = $("#Search").val().toLowerCase();
        $(".Search").each(function () {
            if (!Contains($(this).text().toLowerCase(), searchtext)) {
                $(this).hide();
            }
            else {
                $(this).show();
            }
        });
    });

    function sortTable(n) {
        var table,
            rows,
            switching,
            i,
            x,
            y,
            shouldSwitch,
            dir,
            switchcount = 0;
        table = document.getElementById("DataTable");
        switching = true;
        //Set the sorting direction to ascending:
        dir = "asc";
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < rows.length - 1; i++) { //Change i=0 if you have the header th a separate table.
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /*check if the two rows should switch place,
                based on the direction, asc or desc:*/
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        //if so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;


                    }
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                //Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /*If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again.*/
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }

</script>


