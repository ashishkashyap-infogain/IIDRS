@model IEnumerable<IIDRS.M_CONTACT>

@{
    ViewBag.Title = "Contact Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<br />
<br />
<link href="~/Content/Search.css" rel="stylesheet" />
<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
<script src="~/Scripts/twbsPagination.js" type="text/javascript"></script>

<div style="float:right">
    <button style="float:right" class="btn btn-sm btn-primary rounded-0" id="btnAddRow"><i class="fa fa-address-book"></i>Add</button>
    @*<a href="/Customer/Edit" class="btn btn-sm btn-primary rounded-0"><i class="fa fa-edit"></i>Edit</a>
        <a href="/Customer/Delete" class="btn btn-sm btn-danger rounded-0" onclick="return confirm('Are you sure?') "><i class="fa fa-trash"></i>Delete</a>
        <a href="/Customer/Save" class="btn btn-sm btn-success rounded-0"><i class="fa fa-save"></i>Save</a>*@
    <br /><br />
</div>
<div class="flexbox">
    <div class="search">
        <div>
            <input type="text" placeholder="Search . . ." required id="Search">
        </div>
    </div>
    </div>


    @*<p>
            @Html.ActionLink("Create New", "Create")
        </p>*@
<table class="table table-bordered table-striped table-hover " id="DataTable">
    <thead class="thead-dark">


        @*<th>
                @Html.DisplayNameFor(model => model.M_BU.ROW_ID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.M_PARTY.PARTY_UID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.M_USER.LOGIN)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.M_USER1.LOGIN)
            </th>*@
        @*<th>
               Row Id
            </th>*@
        @*<th>
                @Html.DisplayNameFor(model => model.ACTIVE_FLG)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.EMP_FLG)
            </th>*@

        @*<th>
                Person ID
            </th>*@
    <th>
        Id


    </th>
    @*<th>
        Type
    </th>*@
    <th>
        First Name
    </th>
    <th>
        Last Name
    </th>
    <th>
        Email Address
    </th>

    <th>
        Phone Number
    </th>
    @*<th>
            BU ID
        </th>*@

    @*<th>

    <!--<th>

        Created Date
    </th>*@
    <th>
        Last Updated Date
    </th>
    <th>

        Active
    </th>

      

    <tr style="cursor:pointer">
        <th onclick="sortTable(0)">Person ID</th>
        <th onclick="sortTable(1)">First Name</th>
        <th onclick="sortTable(2)">Last Name</th>
        <th onclick="sortTable(3)">Email Address</th>
        <th onclick="sortTable(4)">Employee Id</th>
        <th onclick="sortTable(5)">Phone Number</th>
        <th onclick="sortTable(6)">Created Date</th>
        <th onclick="sortTable(7)">Last Updated Date</th>
        <th onclick="sortTable(8)">Active/Deactive</th>
    </tr>



    </thead>

    @foreach (var item in Model)
    {
        <tbody>
            <tr class="Search">
                @*<td>
                        @Html.DisplayFor(modelItem => item.M_BU.ROW_ID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.M_PARTY.PARTY_UID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.M_USER.LOGIN)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.M_USER1.LOGIN)
                    </td>*@
                @*<td>
                        @Html.DisplayFor(modelItem => item.ROW_ID)
                    </td>*@
                @*<td>

            @Html.DisplayFor(modelItem => item.ACTIVE_FLG)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.EMP_FLG)
        </td>*@
                @*<td>
            @Html.DisplayFor(modelItem => item.PERSON_UID)
        </td>*@
                @*@Html.HiddenFor(modelItem => item.PERSON_UID)*@
                @*<td>
                    @Html.DisplayFor(modelItem => item.TYPE)
                </td>*@

                        @Html.DisplayFor(modelItem => item.ACTIVE_FLG)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EMP_FLG)
                    </td>*@

                <td>
                    @Html.DisplayFor(modelItem => item.EMP_ID)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FST_NAME)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LAST_NAME)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EMAIL_ADDR)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.PHONE_NO)
                </td>
                @*<td>

            @Html.DisplayFor(modelItem => item.BU_ID)
        </td>*@
                @*<td>

                        @Html.DisplayFor(modelItem => item.BU_ID)
                    </td>*@
                <td>

                    @Html.DisplayFor(modelItem => item.CREATED_DT)
                </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.LAST_UPD_DT)
                </td>
                <td class="text-center" style="pointer-events:none">
                    <label class="custom-switch"></label>
                    @if (item.ACTIVE_FLG == "1")
                    {
                        <input type="checkbox" name="custom-switch-checkbox" checked="@item.ACTIVE_FLG" class="custom-switch-input">
                    }
                    else
                    {
                        <input type="checkbox" name="custom-switch-checkbox" checked="@item.ACTIVE_FLG" disabled class="custom-switch-input">

                    }
                    <span class="custom-switch-indicator"></span>
                </td>
                @*<td>
                        @Html.ActionLink("Edit", "Edit", new { id=item.PERSON_UID }) |
                        @Html.ActionLink("Details", "Details", new { id=item.PERSON_UID }) |
                        @Html.ActionLink("Delete", "Delete", new { id=item.PERSON_UID })
                    </td>*@
            </tr>
        </tbody>
    }

</table>
    <div class="container">
        <nav aria-label="Page navigation">
            <ul class="pagination" id="pagination"></ul>
        </nav>
    </div>
    <script src="~/scripts/bootstable.js">
        //reference of bootstable.js

    </script>
    <script>
        let addedInLast = false;
        $('#DataTable').SetEditable({
            columnsEd: "0,1,2,3,4",
            $addButton: $('#btnAddRow'),
            onAdd: function () {
                addedInLast = true
                $('#btnAddRow').attr("disabled", "disabled");
            },
            onEdit: (row) => {
                let data
                if (addedInLast) {
                    data = getRowData()
                    makeRequest(data)
                }
                else {
                    data = getEditData(row)
                    editRequest(data)
                }
            },
            //onBeforeDelete: (row) => {
            //    var doc = prompt("Are you sure you want to delete?");
            //},
            onDelete: (row) => {
                $("#btnAddRow").removeAttr("disabled");
                let data
                data = getEId(row)
                if (data != null) {
                    deleteRequest(data)
                }
            }
        });
        //for addition
        function getRowData(row = null) //default null #TODO incase for edit we have to send row number to get data of specific row
        {
            addedInLast = false

            let lastRow = $('#DataTable tr').eq(1);

            console.log(lastRow);
            let totalCols = lastRow[0].cells.length - 1


            let headings = ["EMP_ID","FST_NAME", "LAST_NAME", "EMAIL_ADDR", "PHONE_NO", "CREATED_DT", "LAST_UPD_DT", "ACTIVE_FLG"]


            let data = {}

            for (let col = 0; col < totalCols; col++) {
                let colData = lastRow[0].cells[col].innerText
                data[headings[col]] = colData
            }
            //if (data == null) {
            //    onDelete(data);
            //}

            return data;
        }
        //for edit of row
        function getEditData(row) {

            let headings = ["EMP_ID", "FST_NAME", "LAST_NAME", "EMAIL_ADDR", "PHONE_NO", "CREATED_DT", "LAST_UPD_DT", "ACTIVE_FLG"]


            let data = {}
            getId(row);
            for (let col = 0; col < headings.length - 1; col++) {
                let colData = row.eq(col).text();
                data[headings[col]] = colData
            }

            return data;
        }
        //for delete of row
        function getId(row) {
            addedInLast = false

            let headings = ["PERSON_UID"]

            let data = {}

            data[headings[0]] = row.text();

            return data
        }

        function getEId(row) {
            addedInLast = false

            let headings = ["EMP_ID"]

            let data = {}

            data[headings[0]] = row.text();

            return data
        }
        //ajax post request for add
        function makeRequest(dataToBeSent) {

            $.ajax({
                type: "POST",
                url: "https://localhost:44350/Contact/Create",
                data: dataToBeSent,
                success: function () {
                    $("#btnAddRow").removeAttr("disabled");
                    window.location.reload();
                }
            });
            //alert("Record inserted successfully");
        }
        //ajax post request for edit
        function editRequest(dataToBeSent) {

            $.ajax({
                type: "POST",
                url: "https://localhost:44350/Contact/Edit",
                data: dataToBeSent,
                success: function () {
                    window.location.reload();
                },
                error: function () {
                    window.location.reload();

                }
            });
            //alert("Record edited successfully");
        }
        //ajax post request for delete
        function deleteRequest(dataToBeSent) {

            $.ajax({
                type: "POST",
                url: 'https://localhost:44350/Contact/Delete',
                data: dataToBeSent,
                success: function () {

                    window.location.reload();
                },
                error: function () {
                    window.location.reload();
                }
            });
            //alert("Record deleted successfully");
        }


        //for pagination
        $(document).ready(function () {
            let pageSize = 7;
            var visibleRows = $('table#DataTable tbody tr:visible');

            function drawPagination(totalitems) {
                var $pagination = $('#pagination');
                var totalValue = totalitems;
                var toShow = 7;
                var numOfPage = Math.ceil(totalValue / toShow);
                if (numOfPage > 1) {
                    var totalPages = numOfPage;
                    var currentPage = $pagination.twbsPagination('getCurrentPage');
                    $pagination.twbsPagination('destroy');
                    $pagination.twbsPagination($.extend({}, {
                        startPage: currentPage,
                        totalPages: totalPages,
                        visiblePages: 7,
                        onPageClick: function (event, page) {
                            refreshPage(event, page);
                        }
                    }));
                } else {
                    $pagination.twbsPagination('destroy');
                }
            }
            function refreshPage(event, page) {
                var pageStart = (pageSize * page) - pageSize;
                var pageLast = pageSize * page;
                $(visibleRows).hide();
                var currentRows = $(visibleRows).slice(pageStart, pageLast);
                $(currentRows).show();
            }

            drawPagination(visibleRows.length);

        });
        //for search
        function Contains(text_one, text_two) {
            if (text_one.indexOf(text_two) != -1)
                return true;
        }
        $("#Search").keyup(function () {
            var searchtext = $("#Search").val().toLowerCase();
            $(".Search").each(function () {
                if (!Contains($(this).text().toLowerCase(), searchtext)) {
                    $(this).hide();
                }
                else {
                    $(this).show();
                }
            });
        });

        function sortTable(n) {
            var table,
                rows,
                switching,
                i,
                x,
                y,
                shouldSwitch,
                dir,
                switchcount = 0;
            table = document.getElementById("DataTable");
            switching = true;
            //Set the sorting direction to ascending:
            dir = "asc";
            /*Make a loop that will continue until
            no switching has been done:*/
            while (switching) {
                //start by saying: no switching is done:
                switching = false;
                rows = table.getElementsByTagName("TR");
                /*Loop through all table rows (except the
                first, which contains table headers):*/
                for (i = 1; i < rows.length - 1; i++) { //Change i=0 if you have the header th a separate table.
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                    one from current row and one from the next:*/
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    /*check if the two rows should switch place,
                    based on the direction, asc or desc:*/
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    //Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /*If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again.*/
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }

    </script>


